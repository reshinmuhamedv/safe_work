// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  password      String?
  name          String?
  emailVerified DateTime?
  image         String?

  sites     Site[]
  accounts  Account[]
  sessions  Session[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Site {
  id          String         @id @default(cuid())
  name        String
  location    String
  userId      String
  user        User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  sitePoints  Site_point[]
  missingGear Yolo_results[]
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  @@map("site")
}

model Site_point {
  id        String         @id @default(cuid())
  name      String // Name or identifier for the camera location
  siteId    String
  site      Site           @relation(fields: [siteId], references: [id], onDelete: Cascade)
  faults    Yolo_results[]
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt

  @@unique([siteId, name]) // Ensures unique site points per site
  @@map("sitepoint")
}

model Yolo_results {
  id      String @id @default(cuid())
  helmets Int    @default(0)
  vests   Int    @default(0)
  siteId  String
  site    Site   @relation(fields: [siteId], references: [id], onDelete: Cascade)

  sitePointId   String
  spot_location Site_point @relation(fields: [sitePointId], references: [id], onDelete: Cascade)
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  @@map("results")
}
